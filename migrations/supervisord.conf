# See the work of this extraordinary human https://github.com/channeng/celery-scheduler

[supervisord]
nodaemon=true
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid 
childlogdir=/var/log/supervisor


# Start RabbitMQ server
[program:rabbitmq-server]
command=/bin/bash -c "rabbitmq-server"
user=root
numprocs=1
stdout_logfile=/var/log/rabbitmq/rabbitmq.log
stderr_logfile=/var/log/rabbitmq/rabbitmq_err.log
autostart=true
autorestart=true
startsecs=10
# Causes supervisor to send the termination signal (SIGTERM) to the whole process group.
stopasgroup=true
# If RabbitMQ is supervised, set its priority higher so it starts first
# (lower number is higher priority because that's intuitive)
priority=998


# Run Celery worker
[program:celery]
command=/bin/bash -c "celery multi start worker1 -A dataflow_migrations.dataflow_tasks"
directory=/usr/src/app
user=root
numprocs=1
stdout_logfile=/var/log/celery/celery.log
stderr_logfile=/var/log/celery/celery_err.log
autostart=true
autorestart=true
startsecs=10
stopwaitsecs=600
# Causes supervisor to send the termination signal (SIGTERM) to the whole process group.
stopasgroup=true
# Set Celery priority higher than default (999)
# so if RabbitMQ is supervised, it will start first.
priority=1000


# Start Gunicorn app
[program:gunicorn]
command=/bin/bash -c "gunicorn -c gunicorn.conf.py main:app"
directory=/usr/src/app
stdout_logfile=/var/log/gunicorn/gunicorn.log
stderr_logfile=/var/log/gunicorn/gunicorn_err.log
